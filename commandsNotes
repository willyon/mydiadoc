/***********************************************************************************
 * 一.vim编辑器命令
************************************************************************************/

/*************************************************
 * 1.普通模式
**************************************************/

/*复制光标所在字词*/
yw

/*标记某一行，但不会显示有颜色.a～z只能用于当前缓冲区，而A～Z则可以跨越不同缓冲区*/
m+a~z/A~Z 

/*返回相应标记符号的行首。承上：e.g:你处在file1时可用命令`A，跳转至file2中，之前所建标记A*/
'a～z/A~Z 

/*返回相应标记符行上次离开的位置。'是单引号，`是反引号：*/
`a~z/A~Z  

/*复制被标记为a的行*/
y`a

/*删除被标记为a的行*/
d`a

/*全局自动缩进*/
gg=G

/*代码折叠指令*/
zc  折叠子代内容
zC  折叠家族内容(即祖代与子代皆折叠)
zo  展开子内容
zO  展开家族内容
zr  展开整个文件代码当前代的下一代代码(即捕获展开)
zm  折叠整个文件代码当前代的上一代代码(即冒泡折叠)
[z  到当前打开的折叠的开始处
]z  到当前打开的折叠的末尾处


/******************************************************
 * 2.命令行模式
*******************************************************/

/*横向打开文件*/
:sp filename

/*纵向打开文件*/
:vsp filename 

/*列出所有标记,包括一些系统内置的特殊标记*/
:marks 

/*删除某个或多个标记*/
:delmarks a b c...

/*删除所有标记*/
:delmarks! 

/*高亮某一列*/
":set cc=[Num] Num表示需要高亮的一列（填入一个数字即可）




/************************************************************************************************
 * 二.Linux shell命令
**************************************************************************************************/

/*垂直/水平打开多个窗口*/
vim -O/o file1 file2 file3 ... 


/*该字符组合在命令行下是一个特殊环境变量，代表上一行命令语句的最后一个字符串*/
!$ 

e.g:  ~$:mkdir mydir
      ~$:mv mydir yourdir/haha
      ~$:cd yourdir/haha
      等价于：
      ~$:mkdir mydir
      ~$:mv !$ yourdir/haha
      ~$:cd !$


/*以root身份执行上一条命令*/
sudo !!  


/*避免命令对某个文件的影响*/
! <filename>  

eg:rm !(file.txt) /* 删除当前目录中除文件file.txt外的所有文件*/
   rm !(*.txt)    /* 删除当前目录中除后缀名为.txt外的所有文件*/
                     

/*重定向 将本应输出在屏幕的内容(文本文件或二进制内容)重定向到一文本文件中*/
> 

eg:ll /home/willyon > ls.txt  /*此时列表信息存放在 ls.txt 文本文件中
                                    若继续执行ll /usr/bin > ls.txt 新列表信息会覆盖原有内容
                                    若要内容共存，把 > 改为 >> 即可，此时文件内容按重定向时间顺序共存*/


/*重定向 将文件内容重定向到标准输出*/
< 

eg:cat < ls.txt /*等价于cat ls.txt*/


/*回到上一次的目录*/
cd -   


/*内容查找*/
grep '目标内容' '查找范围'

eg:grep main t*         /* 在当前目录下，在以t开头的文本文件中，查找的包含 main 字符的行*/
   grep -r main t*      /*在当前目录及其子目录下，查找以t开头的文本文件中，包含 main 字符的行*/


/*结果显示*/
less:

eg:grep main -r main * | less /*查找结果在less显示。| 表示管道，即，前面命令的输出结果为后面命令的执行内容*/


/*显示ascii码表*/
man ascii

/*查看硬盘大小以及使用情况*/
df -hl  

/*返回该目录的大小（根据实际大小决定单位G/M/K/B）*/
du -sh <filename>  

/*查看cpu以及内存运行情况 proc：process 进程*/
cat /proc/cpuinfo
cat /proc/meminfo  


/*安装软件命令*/
aptitude 

e.g:sudo aptitude install software = sudo apt-get install software(安装)

/*卸载软件命令*/
#一般1 2 命令组合着用，就能把软件卸载得比较干净了。但是如果不确定该软件包的相应配置文件是否被其它一些现在仍在使用的软件包所依赖的化，可不加 --purge 。
1.sudo apt-get --purge remove <软件包名称>  #该命令表示卸载对应的已安装的软件包，且删除相关配置文件
2.sudo apt-get autoremove #该命令表示删除 为满足其他软件包的依赖而安装的，但现在被依赖的软件包已被卸载删除 的软件包。 

sudo apt-get clean <安装包名称> #该命令表示删除已被安装的软件包的安装包


/*查找已被安装的软件包*/
dpkg --list > dpkgRecord #该命令表示将当前系统已被安装的软件包名称罗列出来，并且导出 至 dpkgRecord 文件中（这样方便查看）。

如果记得你要查找的软件包的部分名字，也可以加上，有助于缩减查找范围。譬如现在我们只记得软件包末两位数为pg,则有：
dpkg --list *pg > dpkgRcord
  

/*截图命令 该命令现已设有快捷键Shift+Ctrl+z 表示 gnome-screenshot -a*/
:~$ gnome-screenshot -w/-a (w window 表示截取当前工作窗口; a area 用户自定义截图区域)

可将dash命令映射到快捷键触发:
系统设置 》键盘 》 快捷键 》 自定义快捷键。
e.g:Shift+Ctrl+z 映射为 :~$ gnome-screenshot -a





/**************************************************************************************************
 * 三.Vundle插件命令(vim命令模式下输入)
***************************************************************************************************/

/*下载安装所管理的插件*/
:BundleInstall
or
:PluginInstall(以下命令中的 Bundle 皆可换为 Plugin )

/*下载安装所管理的插件(在shell命令行运行)*/
vim+BundleInstall+qall

/*更新插件*/
:BundleUpdate

/*清除 .vimrc 列表中没有的插件 即，若要卸载某插件，只需在 .vimrc 的Bundle列表中删除相应插件github仓库，然后在vim中执行下列命令即可*/
:BundleClean

/*列出所有插件*/
:BundleList



/***************************************************************************************************************************
  *css文本的颜色插件 ColorV 以下快捷命令可在 ~/.vim/bundle/colorv.vim/doc/colorv.txt中更改;而下面的<leader>指的是逗号 " , "
 ****************************************************************************************************************************/

/*在vim底部调出色块板*/
<leader>cv

/*调出色块后可点击所需颜色块复制*/
yy

/*调出调色板(已固定在桌面左侧菜单栏，所以也可以直接点击该图标打开)*/
<leader>cd

/*清除文本文件上的颜色*/
<leader>cpc

/******************************
  *gnome-web-photo 网页全尺寸截图插件
 ****************************/
常用命令(详情可$:gnome-web-photo -h查看)
$:gnome-web-photo -t 0 --mode=photo http://www.iplaysoft.com[这里输入要截图的网页地址] photoName.png[这里输入截图命名]

$:gnome-web-photo -t 0 --mode=print http://www.iplaysoft.com photoName.pdf[将网页截图截成可供打印的若干页pdf格式的文件]

关于截图快捷键的记录：
Alt+Prt:截取当前工作窗口可视范围
Shift+Prt:用户自定义截取区域
Ctrl+Shift+x:用户自定义截取区域
Ctrl+Prt:全屏截图（包括工作与非工作区）,但不显示截图结果，而是放在了粘贴板，当有文件编辑需要的时候则粘贴出来
Prt:全屏截图（包括工作与非工作区），显示出截图结果




/******************************
  *删除代码文件中多余的空行
 ******************************/
在命令模式下，输入：
:g/^$/d




/*安装支持fiddler在linux系统运行的软件 mono 方法*/
sudo apt-get install mono-complete




/*将本地主机与虚拟主机之间的文件复制 以下所有操作皆在登陆本地主机时完成*/
将本地文件复制到远程虚拟主机：
# scp <-r> /FILE PATHNAME root@162.243.139.154:/DIRECTORY
  其中 -r 在复制目录类型文件时需要加上
       FILE PATHNAME 表示要复制的文件绝对路径，比如 /home/willyon/.vimrc
       DIRECTORY 表示虚拟主机中用于存放被复制文件的目录，比如 /usr
  因为我们已经将域名 willyon.com 与该ip地址绑定，所以以后任何操作（包括在本地远程登陆虚拟主机），皆可用willyon.com 替代 ip 162.243.139.154,样式如下：
# scp <-r>   [absolute pathName]   root(或者 willyon)@willyon.com(或者 ip 地址162.243.139.154):[directoryName]


将远程虚拟主机文件复制到本地:
# scp <-r>   root(或者 willyon)@willyon.com(或者 ip 地址162.243.139.154):[absolute pathName]   [directoryName]






/*查看本地ip地址*/
$ ifconfig
or
上网直接在搜索框输入 ip 即可






/*中文包安装*/
sudo apt-get install language-pack-zh-hans language-pack-zh-hans-base




/*增加用户*/
adduser <username>


/*设(or)改密码*/
passwd


/*给新用户加 sudo 权限*/
进入root用户权限
su -
添加文件写权限
chmod u+w /etc/sudoers
编辑/etc/sudoers文件
vi /etc/sudoers
找到　root ALL=(ALL) ALL　这一行，在该行下面添加如下内容
＜sername＞ ALL=(ALL) ALL 这里的＜sername＞替换为自己的用户名，如　willyon2


/*zip*/
unzip <filename.zip>  #表示进入到 *.zip 文件所在的目录将压缩文件解压到该目录下

/*.tar.gz解压*/
tar zxvf <filename>

/*rar解压*/
unrar e <filename>

/*虚拟主机上，nginx日志(log)文件位置*/
/var/log/nginx


/*Ubuntu14.04 log 文件 位置*/
/var/log/

/*width offsetWidth clientWidth*/
width:content区的宽度
offsetWidth:content+padding*2+border*2
clientWidth:content+padding*2

style.width只能获取行内样式宽
offsetWidth可以获取行内、内联、外联宽，在没有padding、border时，作用与getComputedStyle(obj)["attr"]方法或obj.currentStyle["attr"]属性完全一样(后两者长度不包括padding和border)


/*vim中文本替换命令　替换命令的语法格式　:[range]s/from/to/[flags]  其中　[flags] 若忽略不写则表示只对指定范围内的第一个匹配项进行替换  其中值得关注的[range]有　1.?chapter?(从当前位置向上搜索，找到的第一个chapter所在的行，chapter可以是任何字符串或者正则表达式)  2./chapter/(从当前位置向下搜索，找到的第一个chapter所在的行)  */

1.替换当前行中的内容
:s/from/to  将当前行中的第一个from，替换成to。如果当前行含有多个from，则只会替换其中的第一个
:s/from/to/g 将当前行中的所有from都替换成to
:s/from/to/gc　将当前行中的所有from都替换成to且在每一次替换前都会询问请求用户确认此操作

2.替换某一行的内容
:.s/from/to/g 在当前行进行替换操作
:33s/from/to/g　在第33行进行替换操作
:$s/from/to/g 在最后一行进行替换操作

3.替换某些行的内容
:10,20s/from/to/g 对第10到20行进行替换操作
:1,$s/from/to/g 对第1到最后一行进行替换操作
:%s/from/to/g   对第1到最后一行进行替换操作(这里的 % 与　1,$ 等价)
:1,.s/from/to/g 1~当前行
:`a,`bs/from/to/g 对标记a和b之间的行(含a和b所在的行)进行替换，其中a和b是之前用m命令所做的标记

:/from/,/;/s/hello/hi/g 向下搜索，将from至分号部分中的　hello 替换为　hi
:?from?,?;?s/hello/hi/g 向上搜索，将from至分号部分中的　hello 替换为　hi

递归更改目录文件下权限
例：sudo chmod 644 gogou-issue/ -R



